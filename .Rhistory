k = 2
fit = pam(x=sim,k,diss=T,cluster.only=T)
obs_this = obs[fit==1]
obs_other = obs[fit==2]
return(list(obs_this,obs_other))
}
prot_rf = list()
for (i in 1:q) # for each class
{
yclass = yclasses[i]
obs_this = which(ytrain==yclass)
obs_other = setdiff(1:n,obs_this)
prot_rf[[i]] = find_prototypes(sim,obs_this,obs_other)
# Check if all points in class are close to some prototype of the class
for (j in obs_this)  # for each point in class
{
if (all(sim[j,prot_rf[[i]]]<threshold))
{
break
}
}
if (j!=tail(obs,n=1) | !(all(sim[j,prot_rf[[i]]]<threshold)))
{
temp = subclassify(sim,obs_this)
obs_this = temp[[1]]
obs_other = temp[[2]]
prot_rf[[i]] = c(find_prototypes(sim,obs_this,obs_other),find_prototypes(sim,obs_other,obs_this))
}
}
prot_rf
prot_breiman
yclasses
xrf = xtrain[unlist(prot_rf),]
yrf = rep(yclasses,sapply(prot_rf, length))
experiment = c(experiment,paste("rf - 2-medoids subclasses",threshold))
predacc = c(predacc,protoclass2(xtest,ytest,xrf,yrf))
numprots = c(numprots,nrow(xrf))
predacc
xtest
ytest
xrf
yrf
train = sample(length(y),round(length(y)*0.60))
xtrain = x[train,]
ytrain = y[train]
temp = setdiff(1:length(y),train)
test = sample(temp,round(length(y)*0.20))
xtest = x[test,]
ytest = y[test]
vali = setdiff(1:length(y),c(train,test))
xvali = x[vali,]
yvali = y[vali]
n = nrow(xtrain)
yfreq = table(ytrain)
yclasses = names(yfreq)
q = length(yfreq)
experiment = vector("character")
predacc = vector("numeric")
numprots = vector("numeric")
fit_rf <- randomForest(x=xtrain,y=ytrain,xtest=xtest,ytest=ytest,ntree=100,proximity=TRUE)
dissim = 1-fit_rf$proximity
sim = fit_rf$proximity
xbreiman = classCenter(xtrain, ytrain, sim)
ybreiman = row.names(xbreiman)
experiment = c(experiment,"rf - Breiman prototypes")
predacc = c(predacc, protoclass2(xtest,ytest,xbreiman,ybreiman))
numprots = c(numprots,nrow(xbreiman))
prot_rf = list()
for (i in 1:q) # for each class
{
yclass = yclasses[i]
obs_this = which(ytrain==yclass)
obs_other = setdiff(1:n,obs_this)
prot_rf[[i]] = find_prototypes(sim,obs_this,obs_other)
# Check if all points in class are close to some prototype of the class
for (j in obs_this)  # for each point in class
{
if (all(sim[j,prot_rf[[i]]]<threshold))
{
break
}
}
if (j!=tail(obs,n=1) | !(all(sim[j,prot_rf[[i]]]<threshold)))
{
temp = subclassify(sim,obs_this)
obs_this = temp[[1]]
obs_other = temp[[2]]
prot_rf[[i]] = c(find_prototypes(sim,obs_this,obs_other),find_prototypes(sim,obs_other,obs_this))
}
}
xrf = xtrain[unlist(prot_rf),]
yrf = rep(yclasses,sapply(prot_rf, length))
experiment = c(experiment,paste("rf - 2-medoids subclasses",threshold))
predacc = c(predacc,protoclass2(xtest,ytest,xrf,yrf))
numprots = c(numprots,nrow(xrf))
predacc
numprots
experiment
threshold = 0.2
prot_rf = list()
for (i in 1:q) # for each class
{
yclass = yclasses[i]
obs_this = which(ytrain==yclass)
obs_other = setdiff(1:n,obs_this)
prot_rf[[i]] = find_prototypes(sim,obs_this,obs_other)
# Check if all points in class are close to some prototype of the class
for (j in obs_this)  # for each point in class
{
if (all(sim[j,prot_rf[[i]]]<threshold))
{
break
}
}
if (j!=tail(obs,n=1) | !(all(sim[j,prot_rf[[i]]]<threshold)))
{
temp = subclassify(sim,obs_this)
obs_this = temp[[1]]
obs_other = temp[[2]]
prot_rf[[i]] = c(find_prototypes(sim,obs_this,obs_other),find_prototypes(sim,obs_other,obs_this))
}
}
xrf = xtrain[unlist(prot_rf),]
yrf = rep(yclasses,sapply(prot_rf, length))
experiment = c(experiment,paste("rf - 2-medoids subclasses",threshold))
predacc = c(predacc,protoclass2(xtest,ytest,xrf,yrf))
numprots = c(numprots,nrow(xrf))
predacc
numprots
threshold = 0
prot_rf = list()
for (i in 1:q) # for each class
{
yclass = yclasses[i]
obs_this = which(ytrain==yclass)
obs_other = setdiff(1:n,obs_this)
prot_rf[[i]] = find_prototypes(sim,obs_this,obs_other)
# Check if all points in class are close to some prototype of the class
for (j in obs_this)  # for each point in class
{
if (all(sim[j,prot_rf[[i]]]<threshold))
{
break
}
}
if (j!=tail(obs,n=1) | !(all(sim[j,prot_rf[[i]]]<threshold)))
{
temp = subclassify(sim,obs_this)
obs_this = temp[[1]]
obs_other = temp[[2]]
prot_rf[[i]] = c(find_prototypes(sim,obs_this,obs_other),find_prototypes(sim,obs_other,obs_this))
}
}
xrf = xtrain[unlist(prot_rf),]
yrf = rep(yclasses,sapply(prot_rf, length))
experiment = c(experiment,paste("rf - 2-medoids subclasses",threshold))
predacc = c(predacc,protoclass2(xtest,ytest,xrf,yrf))
numprots = c(numprots,nrow(xrf))
predacc
nn = vector("numeric")
fn = vector("numeric")
for (i in 1:n)
{
yclass = ytrain[i]
k = yfreq[yclasses==yclass]
nn[i] = sum(ytrain[k.nearest.neighbors(i, dissim, k=k)]==yclass)/k
fn[i] = sum(ytrain[k.nearest.neighbors(i, sim, k=(n-k))]!=yclass)/(n-k)
}
nnfn = cbind(nn,fn)
dim(nnfn)
prot_rf = list()
for (i in 1:q) # for each class
{
yclass = yclasses[i]
obs = which(ytrain==yclass)
candidates = obs
prot_rf[[i]] = vector("numeric")
end = FALSE
while (!end)
{
distances = vector("numeric")
for (j in 1:length(candidates))
{
distances[j] = dist(rbind(point,nnfn[candidates[j]]))
}
prot_rf[[i]] = c(prot_rf[[i]],candidates[sample(which(distances==min(distances)),1)])  # break ties randomly
candidates = vector("numeric")
# Find points that are not close to any prototypes so far
for (j in obs)  # for each point in class
{
if (all(sim[j,prot_rf[[i]]]<threshold))
{
candidates = c(candidates,j)
}
}
if (length(candidates)==0)
{
end=TRUE
}
}
}
xrf = xtrain[unlist(prot_rf),]
yrf = rep(yclasses,sapply(prot_rf, length))
experiment = c(experiment,paste("rf - minimal candidate set",threshold))
predacc = c(predacc,protoclass2(xtest,ytest,xrf,yrf))
numprots = c(numprots,nrow(xrf))
predacc
experiment
# Maximal candidate set
prot_rf = list()
for (i in 1:q) # for each class
{
yclass = yclasses[i]
obs = which(ytrain==yclass)
candidates = obs
prot_rf[[i]] = vector("numeric")
end = FALSE
while (!end)
{
distances = vector("numeric")
for (j in 1:length(candidates))
{
distances[j] = dist(rbind(point,nnfn[candidates[j]]))
}
prot_rf[[i]] = c(prot_rf[[i]],candidates[sample(which(distances==min(distances)),1)])  # break ties randomly
#obs = setdiff(obs,found)
candidates = setdiff(candidates,unlist(prot_rf))
# Find points that are not close to any prototypes so far
for (j in obs)  # for each point in class
{
if (all(sim[j,prot_rf[[i]]]<threshold))
{
break
}
}
if (j==tail(obs,n=1) & !(all(sim[j,prot_rf[[i]]]<threshold)))
{
end=TRUE
}
}
}
xrf = xtrain[unlist(prot_rf),]
yrf = rep(yclasses,sapply(prot_rf, length))
experiment = c(experiment,paste("rf - maximal candidate set",threshold))
predacc = c(predacc,protoclass2(xtest,ytest,xrf,yrf))
numprots = c(numprots,nrow(xrf))
predacc
prot_rf = list()
for (i in 1:q) # for each class
{
yclass = yclasses[i]
obs = which(ytrain==yclass)
candidates = obs
prot_rf[[i]] = vector("numeric")
end = FALSE
while (!end)
{
distances = vector("numeric")
for (j in 1:length(candidates))
{
distances[j] = dist(rbind(point,nnfn[candidates[j]]))
}
prot_rf[[i]] = c(prot_rf[[i]],candidates[sample(which(distances==min(distances)),1)])  # break ties randomly
candidates = vector("numeric")
# Find points that are not close to any prototypes so far
for (j in obs)  # for each point in class
{
if (all(sim[j,prot_rf[[i]]]<threshold))
{
candidates = c(candidates,setdiff(which(sim[j,]>=(1-threshold)),unlist(prot_rf))) #not-already-prototypes close to the minimal set (say within 1-threshold proximity).
}
}
if (length(candidates)==0)
{
end=TRUE
}
}
}
xrf = xtrain[unlist(prot_rf),]
yrf = rep(yclasses,sapply(prot_rf, length))
experiment = c(experiment,paste("rf - in-between candidate set",threshold))
predacc = c(predacc,protoclass2(xtest,ytest,xrf,yrf))
numprots = c(numprots,nrow(xrf))
predacc
colors = c(c("darksalmon", "darkseagreen3", "cornflowerblue")[unclass(ytrain)],rep(c("red","green","blue"),sapply(prot_rf,length)))
pchs = c(rep(21,length(ytrain)),rep(8,nrow(prots)))
pairs(rbind(xtrain,xrf), pch = pchs, col = colors)
prot = prot_rf
colors = c(c("darksalmon", "darkseagreen3", "cornflowerblue")[unclass(ytrain)],rep(c("red","green","blue"),sapply(prot,length)))
pchs = c(rep(21,length(ytrain)),rep(8,nrow(prot)))
pairs(rbind(xtrain,xrf), pch = pchs, col = colors)
head(prot)
prot = xrf
colors = c(c("darksalmon", "darkseagreen3", "cornflowerblue")[unclass(ytrain)],rep(c("red","green","blue"),sapply(prot,length)))
pchs = c(rep(21,length(ytrain)),rep(8,nrow(prot)))
pairs(rbind(xtrain,xrf), pch = pchs, col = colors)
?rm
sapply(prot_rf,length)
colors = c(c("darksalmon", "darkseagreen3", "cornflowerblue")[unclass(ytrain)],rep(c("red","green","blue"),sapply(prot_rf,length)))
pchs = c(rep(21,length(ytrain)),rep(8,nrow(xrf)))
pairs(rbind(xtrain,xrf), pch = pchs, col = colors)
?rm
prot_rf = list()
for (i in 1:q) # for each class
{
yclass = yclasses[i]
obs_this = which(ytrain==yclass)
obs_other = setdiff(1:n,obs_this)
### Level 1
prot_rf[[i]] = find_prototypes(sim,obs_this,obs_other)
# Check if all points in class are close to some prototype of the class
for (j in obs_this)  # for each point in class
{
if (all(sim[j,prot_rf[[i]]]<threshold))
{
break
}
}
if (j!=tail(obs_this,n=1) | !(all(sim[j,prot_rf[[i]]]<threshold)))
{
### Level 2a
temp = subclassify(sim,obs_this)
obs_this2 = temp[[1]]
obs_thiso = temp[[2]]
prot_rf[[i]] =find_prototypes(sim,obs_this2,obs_thiso)
for (j in obs_this2)
{
if (all(sim[j,prot_rf[[i]]]<threshold))
{
break
}
}
if (j!=tail(obs_this2,n=1) | !(all(sim[j,prot_rf[[i]]]<threshold)))
{
### Level 3a
temp = subclassify(sim,obs_this2)
obs_this3 = temp[[1]]
obs_this2o = temp[[2]]
prot_rf[[i]] = c(find_prototypes(sim,obs_this3,obs_this2o),find_prototypes(sim,obs_this2o,obs_this3))
}
### Level 2b
temp = subclassify(sim,obs_other)
obs_othert = temp[[1]]
obs_other2 = temp[[2]]
temp = find_prototypes(sim,obs_othert,obs_other2)
for (j in obs_othert)
{
if (all(sim[j,temp]<threshold))
{
break
}
}
if (j!=tail(obs_othert,n=1) | !(all(sim[j,temp]<threshold)))
{
### Level 3b
temp = subclassify(sim,obs_othert)
obs_othert2 = temp[[1]]
obs_otherto = temp[[2]]
prot_rf[[i]] = c(prot_rf[[i]],find_prototypes(sim,obs_othert2,obs_otherto),find_prototypes(sim,obs_otherto,obs_othert2))
}
}
}
prot_rf
threshold
ytrain[prot_rf[[1]]]
ytrain[prot_rf[[2]]]
ytrain[prot_rf[[3]]]
yclass = yclasses[i]
obs_this = which(ytrain==yclass)
ytrain[obs_this]
unique(ytrain[prot_rf[[1]]])
unique(ytrain[prot_rf[[2]]])
unique(ytrain[prot_rf[[3]]])
yclass = yclasses[i]
obs_this = which(ytrain==yclass)
obs_other = setdiff(1:n,obs_this)
unique(yclass[obs_this])
unique(yclasses[obs_this])
unique(ytrain[obs_this])
unique(ytrain[obs_other])
prot_rf = list()
for (i in 1:q) # for each class
{
yclass = yclasses[i]
obs_t = which(ytrain==yclass)
obs_o = setdiff(1:n,obs_t)
### Level 1
prot_temp = find_prototypes(sim,obs_t,obs_o)
# Check if all points in class are close to some prototype of the class
for (j in obs_t)  # for each point in class
{
if (all(sim[j,prot_temp]<threshold))
{
break
}
}
if (j!=tail(obs_t,n=1) | (all(sim[j,prot_temp]<threshold)))
{
temp = subclassify(sim,obs_t)
obs_tt = temp[[1]]
obs_to = temp[[2]]
### Level 2a
prot_temp = find_prototypes(sim,obs_tt,obs_to)
for (j in obs_tt)
{
if (all(sim[j,prot_temp]<threshold))
{
break
}
}
if (j!=tail(obs_tt,n=1) | (all(sim[j,prot_temp]<threshold)))
{
temp = subclassify(sim,obs_tt)
obs_ttt = temp[[1]]
obs_tto = temp[[2]]
### Level 3aa, 3ab
prot_rf[[i]] = c(find_prototypes(sim,obs_ttt,obs_tto),find_prototypes(sim,obs_tto,obs_ttt))
}
else # Level 2a
{
prot_rf[[i]] = prot_temp
}
### Level 2b
prot_temp = find_prototypes(sim,obs_to,obs_tt)
for (j in obs_to)
{
if (all(sim[j,prot_temp]<threshold))
{
break
}
}
if (j!=tail(obs_to,n=1) | (all(sim[j,prot_temp]<threshold)))
{
temp = subclassify(sim,obs_to)
obs_tot = temp[[1]]
obs_too = temp[[2]]
### Level 3ba, 3bb
prot_rf[[i]] = c(prot_rf[[i]],find_prototypes(sim,obs_ttt,obs_tto),find_prototypes(sim,obs_tto,obs_ttt))
}
else # Level 2b
{
prot_rf[[i]] = c(prot_rf[[i]],prot_temp)
}
}
else   # Level 1
{
prot_rf[[i]] = prot_temp
}
}
prot_rf
ytrain[prot_rf[[1]]]
ytrain[prot_rf[[2]]]
ytrain[prot_rf[[3]]]
rm(list=ls())
library(randomForest)
library(FastKNN)
library(protoclass)
library(cluster)
library(flexclust)
# Iris data
x = iris[,1:4]
y = iris[,5]
train = sample(length(y),round(length(y)*0.60))
xtrain = x[train,]
ytrain = y[train]
temp = setdiff(1:length(y),train)
test = sample(temp,round(length(y)*0.20))
xtest = x[test,]
ytest = y[test]
vali = setdiff(1:length(y),c(train,test))
xvali = x[vali,]
yvali = y[vali]
n = nrow(xtrain)
yfreq = table(ytrain)
yclasses = names(yfreq)
q = length(yfreq)
experiment = vector("character")
predacc = vector("numeric")
numprots = vector("numeric")
protoclass2 = function(data,data_labels,prototypes,prototypes_labels)
{
label = vector("character")
for (i in 1:nrow(data))
{
temp1 = 1000000000  # arbitrarily large number
for (j in 1:nrow(prototypes))
{
temp2 = dist(rbind(data[i,],prototypes[j,]))
if (temp2 < temp1)
{
temp1 = temp2
label[i] = prototypes_labels[j]
}
}
}
return(sum(label==data_labels)/length(label))
}
getwd()
setwd("Downloads/stan_tutorial")
getwd()
temp = read.csv("lalonde.csv",header=F)
temp = read.csv("lalonde.csv",header=T)
goo = sample(1,nrow(temp),100)
temp = temp[goo,]
table(temp$z)
temp = read.csv("lalonde.csv",header=F)
temp = read.csv("lalonde.csv",header=T)
goo = sample(c(1:nrow(temp)),100)
temp = temp[goo,]
table(temp$z)
write.csv("lalondesample.csv",row.names=F)
write.csv(temp,"lalondesample.csv",row.names=F)
